#!/usr/bin/env python3
"""
Script para inicializar o banco de dados do sistema E-Commerce
Cria as tabelas e dados iniciais necess√°rios
"""

from app import app, db, Usuario, Categoria, Anuncio
from werkzeug.security import generate_password_hash

def criar_tabelas():
    """Criar todas as tabelas do banco de dados"""
    print("Criando tabelas do banco de dados...")
    with app.app_context():
        db.create_all()
    print("‚úì Tabelas criadas com sucesso!")

def criar_categorias():
    """Criar categorias padr√£o do sistema"""
    print("Criando categorias padr√£o...")
    
    categorias = [
        {
            'nome': 'Eletr√¥nicos',
            'descricao': 'Smartphones, notebooks, tablets, acess√≥rios eletr√¥nicos e gadgets'
        },
        {
            'nome': 'Roupas e Acess√≥rios',
            'descricao': 'Roupas masculinas, femininas, infantis, cal√ßados e acess√≥rios de moda'
        },
        {
            'nome': 'Casa e Jardim',
            'descricao': 'M√≥veis, decora√ß√£o, eletrodom√©sticos, ferramentas e itens para jardim'
        },
        {
            'nome': 'Esportes e Lazer',
            'descricao': 'Equipamentos esportivos, bicicletas, jogos e artigos de lazer'
        },
        {
            'nome': 'Livros e Educa√ß√£o',
            'descricao': 'Livros f√≠sicos e digitais, materiais educativos e cursos'
        },
        {
            'nome': 'Ve√≠culos',
            'descricao': 'Carros, motos, bicicletas e acess√≥rios automotivos'
        },
        {
            'nome': 'Beleza e Sa√∫de',
            'descricao': 'Cosm√©ticos, produtos de beleza, suplementos e equipamentos de sa√∫de'
        },
        {
            'nome': 'M√∫sica e Instrumentos',
            'descricao': 'Instrumentos musicais, equipamentos de som e acess√≥rios musicais'
        }
    ]
    
    for cat_data in categorias:
        # Verificar se categoria j√° existe
        categoria_existente = Categoria.query.filter_by(nome=cat_data['nome']).first()
        if not categoria_existente:
            categoria = Categoria(
                nome=cat_data['nome'],
                descricao=cat_data['descricao']
            )
            db.session.add(categoria)
    
    db.session.commit()
    print(f"‚úì {len(categorias)} categorias criadas com sucesso!")

def criar_usuario_admin():
    """Criar usu√°rio administrador padr√£o"""
    print("Criando usu√°rio administrador...")
    
    # Verificar se admin j√° existe
    admin_existente = Usuario.query.filter_by(email='admin@ecommerce.com').first()
    if admin_existente:
        print("‚úì Usu√°rio admin j√° existe!")
        return admin_existente
    
    admin = Usuario(
        nome='Administrador do Sistema',
        email='admin@ecommerce.com',
        senha=generate_password_hash('admin123'),
        telefone='(11) 99999-9999',
        endereco='Rua da Administra√ß√£o, 123 - Centro, S√£o Paulo, SP - 01000-000'
    )
    
    db.session.add(admin)
    db.session.commit()
    print("‚úì Usu√°rio admin criado com sucesso!")
    print("   Email: admin@ecommerce.com")
    print("   Senha: admin123")
    
    return admin

def criar_usuarios_exemplo():
    """Criar alguns usu√°rios de exemplo"""
    print("Criando usu√°rios de exemplo...")
    
    usuarios_exemplo = [
        {
            'nome': 'Jo√£o Silva',
            'email': 'joao@email.com',
            'senha': 'joao123',
            'telefone': '(11) 98888-1111',
            'endereco': 'Rua das Flores, 456 - Jardim Paulista, S√£o Paulo, SP'
        },
        {
            'nome': 'Maria Santos',
            'email': 'maria@email.com',
            'senha': 'maria123',
            'telefone': '(11) 97777-2222',
            'endereco': 'Av. Paulista, 789 - Bela Vista, S√£o Paulo, SP'
        },
        {
            'nome': 'Pedro Costa',
            'email': 'pedro@email.com',
            'senha': 'pedro123',
            'telefone': '(11) 96666-3333',
            'endereco': 'Rua Augusta, 321 - Vila Madalena, S√£o Paulo, SP'
        }
    ]
    
    usuarios_criados = []
    for user_data in usuarios_exemplo:
        # Verificar se usu√°rio j√° existe
        usuario_existente = Usuario.query.filter_by(email=user_data['email']).first()
        if not usuario_existente:
            usuario = Usuario(
                nome=user_data['nome'],
                email=user_data['email'],
                senha=generate_password_hash(user_data['senha']),
                telefone=user_data['telefone'],
                endereco=user_data['endereco']
            )
            db.session.add(usuario)
            usuarios_criados.append(usuario)
    
    db.session.commit()
    print(f"‚úì {len(usuarios_criados)} usu√°rios de exemplo criados!")
    return usuarios_criados

def criar_anuncios_exemplo(admin, usuarios):
    """Criar an√∫ncios de exemplo"""
    print("Criando an√∫ncios de exemplo...")
    
    # Buscar categorias
    cat_eletronicos = Categoria.query.filter_by(nome='Eletr√¥nicos').first()
    cat_roupas = Categoria.query.filter_by(nome='Roupas e Acess√≥rios').first()
    cat_casa = Categoria.query.filter_by(nome='Casa e Jardim').first()
    cat_esportes = Categoria.query.filter_by(nome='Esportes e Lazer').first()
    cat_livros = Categoria.query.filter_by(nome='Livros e Educa√ß√£o').first()
    cat_veiculos = Categoria.query.filter_by(nome='Ve√≠culos').first()
    
    anuncios_exemplo = [
        # An√∫ncios do Admin
        {
            'usuario': admin,
            'categoria': cat_eletronicos,
            'titulo': 'iPhone 13 Pro 256GB Azul Sierra',
            'descricao': 'iPhone 13 Pro em excelente estado de conserva√ß√£o. Sempre usado com pel√≠cula e capinha. Bateria com 92% de sa√∫de. Acompanha carregador original, cabo lightning e caixinha. Motivo da venda: upgrade para iPhone 14.',
            'preco': 3500.00,
            'quantidade': 1
        },
        {
            'usuario': admin,
            'categoria': cat_casa,
            'titulo': 'Mesa de Jantar 6 Lugares com Cadeiras',
            'descricao': 'Mesa de jantar em madeira maci√ßa cor mogno com 6 cadeiras estofadas em tecido bege. Dimens√µes: 1,80m x 1,00m. Muito bem conservada, apenas alguns riscos m√≠nimos de uso. Ideal para sala de jantar ou varanda gourmet.',
            'preco': 1200.00,
            'quantidade': 1
        },
        {
            'usuario': admin,
            'categoria': cat_eletronicos,
            'titulo': 'Notebook Gamer Acer Nitro 5',
            'descricao': 'Notebook Gamer Acer Nitro 5 com Intel Core i5, 16GB RAM, SSD 512GB, GeForce GTX 1650. Ideal para jogos e trabalho pesado. Acompanha carregador e mouse gamer de brinde. Estado impec√°vel.',
            'preco': 2800.00,
            'quantidade': 1
        }
    ]
    
    # Adicionar an√∫ncios dos outros usu√°rios se existirem
    if usuarios:
        for i, usuario in enumerate(usuarios[:3]):  # Apenas os 3 primeiros
            anuncios_exemplo.extend([
                {
                    'usuario': usuario,
                    'categoria': cat_roupas,
                    'titulo': f'Jaqueta de Couro Masculina Tamanho {"M" if i == 0 else "G" if i == 1 else "P"}',
                    'descricao': f'Jaqueta de couro leg√≠timo em excelente estado. Cor preta, muito elegante e confort√°vel. Tamanho {"M" if i == 0 else "G" if i == 1 else "P"}. Pouco usada, sem defeitos.',
                    'preco': 299.90 + (i * 50),
                    'quantidade': 1
                },
                {
                    'usuario': usuario,
                    'categoria': cat_esportes,
                    'titulo': f'Bicicleta {"Mountain Bike" if i == 0 else "Speed" if i == 1 else "Urbana"} Aro 26',
                    'descricao': f'Bicicleta {"para trilhas" if i == 0 else "para velocidade" if i == 1 else "para cidade"} em √≥timo estado. Revisada recentemente, pneus novos, freios ajustados. Ideal para {"aventuras" if i == 0 else "exerc√≠cios" if i == 1 else "transporte"}.',
                    'preco': 600.00 + (i * 200),
                    'quantidade': 1
                }
            ])
    
    anuncios_criados = []
    for anuncio_data in anuncios_exemplo:
        # Verificar se an√∫ncio similar j√° existe
        anuncio_existente = Anuncio.query.filter_by(
            titulo=anuncio_data['titulo'],
            id_usuario=anuncio_data['usuario'].id_usuario
        ).first()
        
        if not anuncio_existente:
            anuncio = Anuncio(
                id_usuario=anuncio_data['usuario'].id_usuario,
                id_categoria=anuncio_data['categoria'].id_categoria,
                titulo=anuncio_data['titulo'],
                descricao=anuncio_data['descricao'],
                preco=anuncio_data['preco'],
                quantidade_disponivel=anuncio_data['quantidade']
            )
            db.session.add(anuncio)
            anuncios_criados.append(anuncio)
    
    db.session.commit()
    print(f"‚úì {len(anuncios_criados)} an√∫ncios de exemplo criados!")

def main():
    """Fun√ß√£o principal de inicializa√ß√£o"""
    print("=" * 50)
    print("INICIALIZA√á√ÉO DO SISTEMA E-COMMERCE")
    print("=" * 50)
    
    with app.app_context():
        try:
            # 1. Criar tabelas
            criar_tabelas()
            
            # 2. Criar categorias
            criar_categorias()
            
            # 3. Criar usu√°rio admin
            admin = criar_usuario_admin()
            
            # 4. Criar usu√°rios de exemplo
            usuarios_exemplo = criar_usuarios_exemplo()
            
            # 5. Criar an√∫ncios de exemplo
            criar_anuncios_exemplo(admin, usuarios_exemplo)
            
            print("\n" + "=" * 50)
            print("INICIALIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
            print("=" * 50)
            print("\nüéâ Sistema pronto para uso!")
            print("\nüìä Dados criados:")
            print(f"   ‚Ä¢ {Categoria.query.count()} categorias")
            print(f"   ‚Ä¢ {Usuario.query.count()} usu√°rios")
            print(f"   ‚Ä¢ {Anuncio.query.count()} an√∫ncios")
            
            print("\nüîë Credenciais de acesso:")
            print("   Admin: admin@ecommerce.com / admin123")
            print("   Usu√°rio teste 1: joao@email.com / joao123")
            print("   Usu√°rio teste 2: maria@email.com / maria123")
            print("   Usu√°rio teste 3: pedro@email.com / pedro123")
            
            print("\nüöÄ Para iniciar o sistema:")
            print("   python app.py")
            
        except Exception as e:
            print(f"\n‚ùå Erro durante a inicializa√ß√£o: {str(e)}")
            return False
    
    return True

if __name__ == '__main__':
    success = main()
    if not success:
        exit(1)